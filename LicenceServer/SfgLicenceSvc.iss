; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SoftGreen\SFG Licence Server"
#define MyAppVersion "1.0.0.0"
#define MyAppPublisher "SoftGreen Softwares"
#define MyAppURL "http://www.softgreen.inf.br"
#define MyAppExeName "SfgLicenceSvc.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
LanguageDetectionMethod=locale
AppId={{C373FCC3-6DD2-4EA2-A82C-0B4F6E20CC40}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf32}\{#MyAppName}
AppCopyright=© Copyright 2012 By SoftGreen
DefaultGroupName=SoftGreen\SFG Licence Server
AppContact=softgreen@softgreen.inf.br
WizardImageFile=installn.bmp
WizardSmallImageFile=installm.bmp
MinVersion=0,5.01sp3
OutputBaseFilename=SfgLicenceServer
SetupIconFile=sfgicon.ico
Compression=lzma
SolidCompression=yes

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[Files]
Source: "SfgLicenceSvc.exe"; DestDir: "{app}"; Flags: confirmoverwrite onlyifdoesntexist 32bit
Source: "SfgLicenceSvc.ini"; DestDir: "{app}"; Flags: onlyifdoesntexist; AfterInstall: AfterInstallIni
Source: "..\LicenceId\SfgLicenceId.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\Identificador Máquina"; Filename: "{app}\SfgLicenceId.exe"
Name: "{group}\Log Servidor de Licenças"; Filename:  "{app}\SfgLicenceSvc.log"
Name: "{group}\Desinstalar Servidor de Licenças"; Filename: "{uninstallexe}"
Name: "{group}\Serviço\Iniciar Servidor de Licenças"; Filename: "{sys}\sc.exe"; WorkingDir: "{sys}"; IconFilename: "{app}\SfgLicenceSvc.exe"; Parameters: "start SfgLicenceSvc"
Name: "{group}\Serviço\Parar Servidor de Licenças"; Filename: "{sys}\sc.exe"; WorkingDir: "{sys}"; IconFilename: "{app}\SfgLicenceSvc.exe"; Parameters: "stop SfgLicenceSvc"

[Run]
Filename: "{app}\{#MyAppExeName}"; Parameters: "-install"; WorkingDir: "{app}"; Flags: nowait shellexec; Tasks: installsvc
Filename: "{app}\SfgLicenceId.exe"; WorkingDir: "{app}"; Flags: postinstall; Description: "Executar utilitário para Identificador da Máquina"

[Tasks]
Name: "installsvc"; Description: "Instalar serviço de licença"; GroupDescription: "Servidor de Licenças"; Flags: checkablealone

[UninstallRun]
Filename: "{sys}\sc.exe"; Parameters: "stop SfgLicenceSvc"; Flags: shellexec
Filename: "{sys}\sc.exe"; Parameters: "delete SfgLicenceSvc"; Flags: shellexec

[Code]
var SvcPage: TWizardPage;
    ClienteEdt, PortSvcEdt: TNewEdit;
    CheckUseLog: TCheckBox;     

procedure BDPagePortKeyPress(Sender: TObject; var Key: Char);
begin
  if not(((Ord(Key) >= 48) and (Ord(Key) <= 57)) or (Key = #8)) then
    Key := #0;
end;

function SvcPageNextButtonClick(Sender: TWizardPage): Boolean;
begin
  if PortSvcEdt.Text = '' then 
  begin
     MsgBox('Informe a porta do servidor de licenças.', mbInformation, mb_Ok);
     Result := false;
     Exit;
  end;

  if Length(ClienteEdt.Text) <> 15 then 
  begin
     MsgBox('Informe o código do cliente com 15 digitos para o uso com o arquivo de licença.', mbInformation, mb_Ok);
     Result := false;
     Exit;
  end;
    
  Result := true;
end;

procedure CreateTheWizardPages;
var
  StaticText: TNewStaticText;
  PosX: Integer;
begin

  PosX := 70;
  SvcPage := CreateCustomPage(wpSelectDir, 'Servidor de Licenças', 'Parâmetros para inicializar o servidor de licenças.');
  SvcPage.OnNextButtonClick := @SvcPageNextButtonClick;
  
  StaticText := TNewStaticText.Create(SvcPage);
  StaticText.Top := ScaleY(10);
  StaticText.Left := ScaleX(10);
  StaticText.Caption := 'Porta:';
  StaticText.AutoSize := True;
  StaticText.Parent := SvcPage.Surface;

  PortSvcEdt := TNewEdit.Create(SvcPage);
  PortSvcEdt.Top := StaticText.Top - ScaleY(2);
  PortSvcEdt.Left := ScaleX(PosX);
  PortSvcEdt.Width := ScaleX(80);
  PortSvcEdt.Text := '4596';
  PortSvcEdt.Parent := SvcPage.Surface;
  PortSvcEdt.OnKeyPress := @BDPagePortKeyPress;
 
  StaticText := TNewStaticText.Create(SvcPage);
  StaticText.Top := PortSvcEdt.Top + PortSvcEdt.Height + ScaleY(6);
  StaticText.Left := ScaleX(10);
  StaticText.Caption := 'Cliente:';
  StaticText.AutoSize := True;
  StaticText.Parent := SvcPage.Surface;

  ClienteEdt := TNewEdit.Create(SvcPage);
  ClienteEdt.Top := StaticText.Top - ScaleY(2);
  ClienteEdt.Left := ScaleX(PosX);
  ClienteEdt.Width := ScaleX(150);
  ClienteEdt.Text := '';
  ClienteEdt.Parent := SvcPage.Surface;
  ClienteEdt.MaxLength := 15;
  ClienteEdt.OnKeyPress := @BDPagePortKeyPress;
 
  CheckUseLog := TCheckBox.Create(SvcPage);
  CheckUseLog.Top := ClienteEdt.Top + ClienteEdt.Height + ScaleY(6);
  CheckUseLog.Left := ScaleX(PosX);
  CheckUseLog.Width := ScaleX(250);
  CheckUseLog.Caption := 'Utilizar log para o servidor de licenças?';
  CheckUseLog.State := cbChecked;
  CheckUseLog.Parent := SvcPage.Surface; 

end;

procedure InitializeWizard();
begin
  CreateTheWizardPages;
end;

procedure AfterInstallIni();
var strIni: String;
begin
  strIni := ExpandConstant('{app}') + '\SfgLicenceSvc.ini';
  //Configurando o servidor de licenças
  SetIniString('LicenceServer','port',PortSvcEdt.Text,strIni);
  SetIniString('LicenceServer','cliente',ClienteEdt.Text,strIni);
  
  SetIniBool('LogFile','enabled',CheckUseLog.Checked,strIni);
  SetIniInt('LogFile','maxsize',1024,strIni);
 
end;

